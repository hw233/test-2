import "resource.proto";
import "item.proto";
import "mail.proto";
import "node.proto";
import "monarch.proto";
import "energy.proto";
import "team.proto";

package SanProto;

//触发战争/随机事件
message TriggerEventReq {
  required uint64 user_id = 1;
  optional LuckyEventInfo.TYPE type = 2;
  optional MonarchInfo monarch = 3;
}
message TriggerEventRes {
  required int32 status = 1;
  optional MapInfo map = 2;
  optional ResourceInfo resource = 3;
  repeated ItemInfo items = 4;
  repeated MailInfo mails = 5;
  optional EnergyInfo energy_info = 6;
}

//清除随机事件
message ClearLuckyEventReq {
  required uint64 user_id = 1;
  required NodeInfo node = 2;
}
message ClearLuckyEventRes {
  enum RET {
    OK = 0;
    NO_EVENT = 1;
  }
  required int32 status = 1;
  repeated NodeInfo nodes = 2;
  optional ResourceInfo resource = 3;
  repeated ItemInfo items = 4;
  repeated MailInfo mails = 5;
  optional RET ret = 6;
  optional NodeInfo node = 7;
}

//手动重新匹配 PVP 节点
message RematchNodeReq {
  required uint64 user_id = 1;
  required NodeInfo node = 2;
}
message RematchNodeRes {
  required int32 status = 1;
  optional NodeInfo node = 2;
}


message Player {
  optional uint64 user_id = 1;
  optional bytes name = 2;
  optional int32 level = 3;
  optional int32 icon_id = 4;
  optional int32 country = 5;
  repeated TeamInfo teams = 6;
  repeated int32 battle_tech_ids = 7;//战斗科技
  optional int32 battle_score = 8;
  optional int32 union_id = 9;
  optional bytes union_name = 10;
  optional int32 union_icon_id = 11;
  optional bool in_protect = 12;    //是否处于护盾保护
  optional int32 hatred = 13;       //仇恨值
  optional int32 been_attacked_num = 14;       //被攻击次数

  //战利品
  optional ResourceInfo reward_resource = 15; 
  repeated ItemInfo reward_items = 16;

  //统计
  optional ResourceInfo today_attack_resource = 17;   //今日掠夺钱粮
  optional ResourceInfo today_robbed_resource = 18;   //今日被其掠夺钱粮

}

//查询对手信息
message QueryPlayersReq {
  optional int32 type = 1;  //1:掠夺 2:仇家 3:查询特定条件的对手
  optional bytes str = 2;   //当type为3时，字段为id或名字
  optional int32 cost_money = 3;   //消耗的金钱
}
message QueryPlayersRes {
  required int32 status = 1;
  repeated Player players = 2;
  optional int32 attack_num = 3;
  optional int32 left_reset_num = 4;  //剩余重置次数
  optional ResourceInfo resource = 5;
}

//查询指定id的玩家信息 
message QueryPlayerInfoReq {
  required uint64 user_id = 1;  //玩家id
}
message QueryPlayerInfoRes {
  required int32 status = 1;
  optional Player player = 2;
  optional int32 attack_num = 3;
  optional int32 left_reset_num = 4;  //剩余重置次数
}

//重置攻击次数
message ResetAttackNumReq {
}
message ResetAttackNumRes {
  required int32 status = 1;
  optional int32 attack_num = 3;
  optional int32 left_reset_num = 4;  //剩余重置次数
  optional ResourceInfo resource = 5;
}



