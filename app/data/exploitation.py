#coding:utf8
"""
Created on 2016-05-27
@Author: zhoubin(zhoubin@ice-time.cn)
@Brief : 开采相关数据和逻辑
"""

import math
from utils import logger
from utils import utils
from datalib.data_loader import data_loader
from app.data.node import NodeInfo


class ExploitationInfo(object):
    """开采信息
    """

    def __init__(self, user_id = 0,
            search_level = 1, search_progress = 0, 
            search_arise_time = 0, search_start_time = 0,
            deep_mining_level = 1, deep_mining_progress = 0, 
            deep_mining_arise_time = 0, deep_mining_start_time = 0,
            hermit_level = 1, hermit_progress = 0, 
            hermit_arise_time = 0, hermit_start_time = 0):

        self.user_id = user_id

        #探索废墟
        self.search_level = search_level
        self.search_progress = search_progress
        self.search_arise_time = search_arise_time
        self.search_start_time = search_start_time

        #勘探秘矿
        self.deep_mining_level = deep_mining_level
        self.deep_mining_progress = deep_mining_progress
        self.deep_mining_arise_time = deep_mining_arise_time
        self.deep_mining_start_time = deep_mining_start_time

        #探访隐士
        self.hermit_level = hermit_level
        self.hermit_progress = hermit_progress
        self.hermit_arise_time = hermit_arise_time
        self.hermit_start_time = hermit_start_time


    @staticmethod
    def create(user_id):
        """初始的开采信息
        Args:
            user_id[int]: 用户 id
            now[int]: 当前时间戳
        Returns:
            exploitation[ExploitationInfo]
        """
        exploitation = ExploitationInfo(user_id)

        return exploitation


    def is_able_to_open_search(self):
        return self.search_arise_time == 0 and self.search_start_time == 0


    def is_able_to_open_deep_mining(self):
        return self.deep_mining_arise_time == 0 and self.deep_mining_start_time == 0


    def is_able_to_open_hermit(self):
        return self.hermit_arise_time == 0 and self.hermit_start_time == 0


    def get_search_progress(self):
        level_up_time = int(data_loader.EventSearchLevelBasicInfo_dict[self.search_level].LevelUpTime)
        if self.search_progress >= level_up_time:
            return 1.0
        else:
            return 1.0 * self.search_progress / level_up_time


    def get_deep_mining_progress(self):
        level_up_time = int(data_loader.EventDeepMiningLevelBasicInfo_dict[self.deep_mining_level].LevelUpTime)
        if self.deep_mining_progress >= level_up_time:
            return 1.0
        else:
            return 1.0 * self.deep_mining_progress / level_up_time


    def get_hermit_progress(self):
        level_up_time = int(data_loader.EventHermitLevelBasicInfo_dict[self.hermit_level].LevelUpTime)
        if self.hermit_progress >= level_up_time:
            return 1.0
        else:
            return 1.0 * self.hermit_progress / level_up_time


    def is_heroes_satisfied(self, node, heroes, exploit_level):
        if node.is_exploit_random_item():
            basic = data_loader.EventSearchLevelBasicInfo_dict[exploit_level]
            need_score = int(basic.limitHeroResearch)
        
        elif node.is_exploit_enchant_material():
            basic = data_loader.EventDeepMiningLevelBasicInfo_dict[exploit_level]
            need_score = int(basic.limitHeroInternalAffairs)

        elif node.is_exploit_hero_star_soul():
            basic = data_loader.EventHermitLevelBasicInfo_dict[exploit_level]
            need_score = int(basic.limitHeroResearch)

        else:
            return False
            
        need_hero_num = int(basic.limitHeroNum)
        heros_num = 0
        for hero in heroes:            
            if hero is not None:
                if node.is_exploit_random_item() and hero.research_score >= need_score:
                    heros_num += 1
                elif node.is_exploit_enchant_material() and hero.interior_score >= need_score:
                    heros_num += 1
                elif node.is_exploit_hero_star_soul() and hero.research_score >= need_score:
                    heros_num += 1

        if heros_num < need_hero_num:
            return False

        return True


    def arise(self, node, now):
        if node.is_exploit_random_item():
            self.search_arise_time = now
        elif node.is_exploit_enchant_material():
            self.deep_mining_arise_time = now
        elif node.is_exploit_hero_star_soul():
            self.hermit_arise_time = now
        else:
            return False

        return True


    def clear(self, node, now):
        if node.is_exploit_random_item():
            self.search_arise_time = 0
        elif node.is_exploit_enchant_material():
            self.deep_mining_arise_time = 0
        elif node.is_exploit_hero_star_soul():
            self.hermit_arise_time = 0
        else:
            return False

        return True


    def start(self, node, now):
        if node.is_exploit_random_item():
            return self._start_search(now)
        elif node.is_exploit_enchant_material():
            return self._start_deep_mining(now)
        elif node.is_exploit_hero_star_soul():
            return self._start_hermit(now)

        return False


    def get_offline_exploit_reward(self, node, now):
        if node.is_exploit_random_item():
            time = min(now - self.search_start_time, node.exploit_total_time)
            hour = time / 3600
            level = min(self.search_level, node.exploit_level) 
            basic = data_loader.EventSearchLevelBasicInfo_dict[level]
        elif node.is_exploit_enchant_material():
            time = min(now - self.deep_mining_start_time, node.exploit_total_time)
            hour = time / 3600
            level = min(self.deep_mining_level, node.exploit_level) 
            basic = data_loader.EventDeepMiningLevelBasicInfo_dict[level]
        elif node.is_exploit_hero_star_soul():
            time = min(now - self.hermit_start_time, node.exploit_total_time)
            hour = time / 3600
            level = min(self.hermit_level, node.exploit_level) 
            basic = data_loader.EventHermitLevelBasicInfo_dict[level]
        else:
            return (None, None)

        return (basic.level, int(basic.rewardNumPerHour * hour))


    def finish(self, node, now):
        if node.is_exploit_random_item():
            return self._finish_search(node, now)
        elif node.is_exploit_enchant_material():
            return self._finish_deep_mining(node, now)
        elif node.is_exploit_hero_star_soul():
            return self._finish_hermit(node, now)

        return False


    def _start_search(self, now):
        self.search_start_time = now        
        return True

    def _start_deep_mining(self, now):
        self.deep_mining_start_time = now
        return True

    def _start_hermit(self, now):
        self.hermit_start_time = now
        return True


    def _finish_search(self, node, now):
        if node.exploit_level >= self.search_level:
            #只有挖掘当前最大层，进度才会涨
            self.search_progress += min(now - self.search_start_time, node.exploit_total_time)
            
            max_level = max(data_loader.EventSearchLevelBasicInfo_dict.keys())
            level_up_time = int(data_loader.EventSearchLevelBasicInfo_dict[self.search_level].LevelUpTime)
            if self.search_level != max_level and self.search_progress >= level_up_time:
                self.search_level += 1
                self.search_progress = 0

        self.search_arise_time = 0
        self.search_start_time = 0
        return True

    def _finish_deep_mining(self, node, now):
        if node.exploit_level >= self.deep_mining_level:
            #只有挖掘当前最大层，进度才会涨
            self.deep_mining_progress += min(now - self.deep_mining_start_time, node.exploit_total_time)
            
            max_level = max(data_loader.EventDeepMiningLevelBasicInfo_dict.keys())
            level_up_time = int(data_loader.EventDeepMiningLevelBasicInfo_dict[self.deep_mining_level].LevelUpTime)
            if self.deep_mining_level != max_level and self.deep_mining_progress >= level_up_time:
                self.deep_mining_level += 1
                self.deep_mining_progress = 0

        self.deep_mining_arise_time = 0
        self.deep_mining_start_time = 0
        return True

    def _finish_hermit(self, node, now):
        if node.exploit_level >= self.hermit_level:
            #只有挖掘当前最大层，进度才会涨
            self.hermit_progress += min(now - self.hermit_start_time, node.exploit_total_time)
            
            max_level = max(data_loader.EventHermitLevelBasicInfo_dict.keys())
            level_up_time = int(data_loader.EventHermitLevelBasicInfo_dict[self.hermit_level].LevelUpTime)
            if self.hermit_level != max_level and self.hermit_progress >= level_up_time:
                self.hermit_level += 1
                self.hermit_progress = 0

        self.hermit_arise_time = 0
        self.hermit_start_time = 0
        return True

